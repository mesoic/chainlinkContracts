1) Notes from a purpousely failing jobRun to unit test cancelRequest(). The idea is 
	to call test cancelRequest() to verify that we can back LINK out of unfulfilled 
	requests or failed job runs. 

	
2) Create a failing job run by defining a bridge to a non-existent endpoint. 
	
		
		Name: failing-ea
		URL: https://localhost:7777
		Confirmations: 0
		Minimum Contract Payment: 0
		Outgoing Token: pCyn0yvgNfSBsV4ocyd/K1AGPsaL1hQ6	
	

3) Create a jobSpec in chainlink node which makes use of non-existent endpoint 
	
	>>>	{
		  "initiators": [
		    {
		      "type": "runlog",
		      "params": {
		        "address": "0x5471030a14ea46a32f065ac226516723b429ec2b"
		      }
		    }
		  ],
		  "tasks": [
		    {
		      "type": "failing-ea",
		      "confirmations": null,
		      "params": {
		      }
		    },
		    {
		      "type": "copy",
		      "confirmations": null,
		      "params": {
		        "copyPath": "USD"
		      }
		    },
		    {
		      "type": "multiply",
		      "confirmations": null,
		      "params": {
		        "times": 100000000
		      }
		    },
		    {
		      "type": "ethint256",
		      "confirmations": null,
		      "params": {
		      }
		    },
		    {
		      "type": "ethtx",
		      "confirmations": null,
		      "params": {
		      }
		    }
		  ],
		  "startAt": null,
		  "endAt": null
		}


4) Confifure our job object in truffle suite to call the failed job 
		
		{
			"oracleAddress" : "0x5471030a14ea46a32f065ac226516723b429ec2b",
			"jobId"			: "d34b21180b634336bf71abe2ce841b24",	
			"payment"		: "100000000000000000"
		}
		

5) Call the failed job through our external adapter consumer contract
		
		npx truffle exec scripts/externalAdapter/request-externalAdapter.js --network ropsten
		Using network 'ropsten'.

	>>> Creating request on contract: 0xb4302F5bFf79fEbe8e75a8fcB1A62C640A798271
		txHash: 0xabc57161178daabd727e799587e009f2f4f09ad49502b2e3036a0052a46886ad
		{
		  specId: '0x6433346232313138306236333433333662663731616265326365383431623234',
		  requester: '0xb4302F5bFf79fEbe8e75a8fcB1A62C640A798271',
		  requestId: '0xaed2196c045a000c446053645f0cb586d1aee975a4a8f3481b4489c2668b2351',
		  payment: '0x016345785d8a0000',
		  callbackAddr: '0xb4302F5bFf79fEbe8e75a8fcB1A62C640A798271',
		  callbackFunc: '0x4357855e',
		  expiration: '0x5e5ff0be',
		  data: <Buffer bf ff>,
		  dataVersion: 1,
		  topic: '0xd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c65'
		}
		0xabc57161178daabd727e799587e009f2f4f09ad49502b2e3036a0052a46886ad
		Truffle v5.1.14 (core: 5.1.14)
		Node v13.9.0

6) We can verify at Tx hash that this call transfers 0.1LINK into the oracle contract for the 
	purpousely failing job run.
		
		https://ropsten.etherscan.io/tx/0xabc57161178daabd727e799587e009f2f4f09ad49502b2e3036a0052a46886ad

7) After waiting for 300s (the timeout set in chainlink .env) we will try to call cancelRequest(). 
	This will pull the 0.1LINK back into the consumer contract for the failed job request
		
		https://ropsten.etherscan.io/tx/0xb309c657acfd4aa567659fe23b0ab7073317ba15be64a1fc8893fa26dd3821d1
	